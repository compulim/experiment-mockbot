name: 'ðŸš€ [Azure] Build and deploy'

# Secrets used in this GitHub workflow:
# - AZURE_CLIENT_ID
# - AZURE_SUBSCRIPTION_ID
# - AZURE_TENANT_ID
# - GH_TOKEN_READ_PACKAGES
# Vars used in this GitHub workflow:
# - AZURE_RESOURCE_GROUP_NAME
# - GH_USERNAME_READ_PACKAGES
on:
  push:
    branches: ['main']
  workflow_dispatch: {}

concurrency:
  group: 'azure'
  cancel-in-progress: true

env:
  DEPLOYMENT_FAMILY_NAME: hawo-mockbot4
  IMAGE_NAME_WITHOUT_OWNER: ${{ github.event.repository.name }}
  NODE_VERSION: current
  REGISTRY: ghcr.io

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Clean install
        run: npm clean-install

      - name: Build
        run: npm run build

      - name: Pack bot
        run: npm pack
        working-directory: ./packages/bot

      - name: Upload tarball
        uses: actions/upload-artifact@v4
        with:
          compression-level: 0
          name: bot-tarball
          path: ./packages/bot/*.tgz
          retention-days: 1

      - name: Upload Bicep templates
        uses: actions/upload-artifact@v4
        with:
          compression-level: 0
          name: bicep
          path: ./bicep
          retention-days: 1

  publish:
    name: Publish
    needs: build
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest

    steps:
      - name: Download tarball
        uses: actions/download-artifact@v4
        with:
          name: bot-tarball

      - name: Extract tarball
        run: tar xvf ./*.tgz --strip-components=1

      - name: List directory
        run: ls -la

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_WITHOUT_OWNER }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=sha,format=long

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./ # Required
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    environment: azure
    name: Deploy
    needs: publish
    permissions:
      id-token: write
    runs-on: ubuntu-latest

    steps:
      - name: Download Bicep templates
        uses: actions/download-artifact@v4
        with:
          name: bicep

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      - id: deploy-to-azure
        name: Deploy to Azure
        uses: azure/arm-deploy@v2
        with:
          failOnStdErr: false
          parameters: 'builderObjectId=${{ secrets.AZURE_CLIENT_ID }} deploymentFamilyName=${{ env.DEPLOYMENT_FAMILY_NAME }} imageName=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_WITHOUT_OWNER }}:sha-${{ github.sha }} registryUsername=${{ vars.GH_USERNAME_READ_PACKAGES }} registryServer=${{ env.REGISTRY }} registryPassword=${{ secrets.GH_TOKEN_READ_PACKAGES }}'
          resourceGroupName: ${{ vars.AZURE_RESOURCE_GROUP_NAME }}
          template: ./main.bicep

      - id: get-direct-line-secret
        name: Get Direct Line secret
        run: |
           DIRECT_LINE_EXTENSION_KEY=$(az bot directline update --name ${{ steps.deploy-to-azure.outputs.botName }} --output json --resource-group ${{ vars.AZURE_RESOURCE_GROUP_NAME }} | jq -r ".properties.properties.extensionKey1")
           echo "::add-mask::$DIRECT_LINE_EXTENSION_KEY"

           DIRECT_LINE_SECRET=$(az bot directline update --name ${{ steps.deploy-to-azure.outputs.botName }} --output json --resource-group ${{ vars.AZURE_RESOURCE_GROUP_NAME }} | jq -r ".properties.properties.sites[0].key")
           echo "::add-mask::$DIRECT_LINE_SECRET"

           echo direct-line-extension-key=$DIRECT_LINE_EXTENSION_KEY | tee --append $GITHUB_OUTPUT
           echo direct-line-secret=$DIRECT_LINE_SECRET | tee --append $GITHUB_OUTPUT

      - name: Save Direct Line secret to Key Vaulit
        run: |
          az keyvault secret set --name ${{ steps.deploy-to-azure.outputs.directLineExtensionKeySecretName }} --value ${{ steps.get-direct-line-secret.outputs.direct-line-extension-key }} --vault-name ${{ steps.deploy-to-azure.outputs.keyVaultName }}

          az keyvault secret set --name ${{ steps.deploy-to-azure.outputs.directLineSecretSecretName }} --value ${{ steps.get-direct-line-secret.outputs.direct-line-secret }} --vault-name ${{ steps.deploy-to-azure.outputs.keyVaultName }}

  cleanup:
    name: Cleanup
    continue-on-error: true
    needs: publish
    permissions:
      packages: write
    runs-on: ubuntu-latest

    steps:
      - name: Delete obsoleted images
        continue-on-error: true
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.IMAGE_NAME_WITHOUT_OWNER }}
          package-type: container
          min-versions-to-keep: 5
